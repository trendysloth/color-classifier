{"version":3,"sources":["Sketch.js","Firebase.js","Buttons.js","Newcanvas.js","Train.js","Nav.js","Displaycanvas.js","Datacollection.js","Test.js","Displaycanvas2.js","Visualization.js","RouterIndex.js","App.js","serviceWorker.js","index.js"],"names":["r","g","b","colors","Firebase","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","Buttons","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","sendData","colorDatabase","database","ref","data","concat","label","button","console","log","color","push","err","that","generateColor","key","assertThisInitialized","bind","react_default","a","createElement","Fragment","Button","onClick","Component","Sketch","p","setup","createCanvas","draw","background","noStroke","rotateY","box","pop","model","Canvas","allButtons","map","index","src_Buttons","Newcanvas","removeCanvas","canvas","remove","generateCanvas","p5","sketch","refs","wrapper","Nav","className","Link","to","num","Math","round","random","Train","train","xs","ys","numEpoch","state","labels","tf","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","allData","entries","Symbol","iterator","next","done","record","value","col","labelList","indexOf","return","labelsTensor","print","dispose","shape","hidden","dense","units","activation","inputShape","output","add","optimizer","sgd","compile","loss","_starttrain","apply","arguments","starttrain","then","results","history","asyncToGenerator","regenerator_default","mark","_callee","options","wrap","_context","prev","epochs","validationSplit","shuffle","callbacks","onBatchEnd","onEpochEnd","logs","val_loss","x","y","setState","toFixed","fit","abrupt","sent","stop","predict","argMax","dataSync","prediction","alert","downloadData","canvas2","saveJSON","wrapper3","sketch2","wrapper5","handleChange","handleSubmit","removeTodo","event","target","preventDefault","parseInt","item","todoList","filter","arr","Col","Form","inline","onSubmit","FormGroup","Input","onChange","placeholder","es","height","width","window","innerWidth","id","Displaycanvas","wrapper2","once","gotData","displayColor","c","colorByLabel","fill","i","length","rect","rect_x","val","keys","_i","color_labels","y_init","x_pos","y_pos","blue-ish","green-ish","pink-ish","grey-ish","red-ish","purple-ish","brown-ish","orange-ish","yellow-ish","Datacollection","src_Nav","Container","Row","src_Newcanvas","src_Sketch","src_Displaycanvas","wrapper4","src_Train","rgbToHsl","h","s","max","min","l","d","Array","avgRGBs","datalength","Displaycanvas2","rgbArr","sortedRgbArr","element","sort","c1","c2","selectedColor","nextProps","blueData","greenData","pinkData","greyData","redData","purpleData","brownData","orangeData","yellowData","avgBlue","avgGreen","avgPink","avgGrey","avgRed","avgPurple","avgBrown","avgOrange","avgYellow","fillColors","Visualization","drawXAxis","e","xaxis","d3","xAxis","gotData2","loaded","drawYAxis","margin","top","right","bottom","left","range","variables","variables2","bandwidth","loaded2","_asyncCall","asyncCall","yaxis","yAxis","domain","formatData","bars","forEach","style","document","getElementsByTagName","parentNode","removeChild","text-align","transform","path","font","src_Displaycanvas2","ticks","format","tickFormat","RouterIndex","BrowserRouter","Switch","Route","component","Test","exact","App","src_RouterIndex","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f2306812.chunk.js","sourcesContent":["\nimport React, { Component } from 'react';\nimport Buttons from './Buttons.js';\n\nvar r, g, b\nvar colors;\nexport function Sketch (p) {\n    r = colors[0]\n    g = colors[1]\n    b = colors[2]\n\n    var rotation = 0;\n    p.setup = function () {\n      p.createCanvas(200, 200);\n    };\n\n    p.draw = function () {\n      p.background(r, g, b);\n      p.noStroke();\n      p.push();\n      p.rotateY(rotation);\n      p.box(100);\n      p.pop();\n    }\n};\n\nclass Canvas extends Component {\n  render() {\n    let buttons = ['blue-ish', 'green-ish', 'pink-ish', 'grey-ish', 'red-ish', 'purple-ish',\n                   'brown-ish', 'orange-ish', 'yellow-ish']\n    r = this.props.colors[0]\n    g = this.props.colors[1]\n    b = this.props.colors[2]\n\n    let allButtons = buttons.map((button, index) => {\n      return <Buttons button={button} r={r} g={g} b={b} draw={Sketch} \n                      generateColor={this.props.generateColor}/>\n    })\n    return (\n      <div>\n        {allButtons}\n      </div>\n     \n    )\n  } \n}\nexport default Canvas;","import * as firebase from 'firebase';\nconst config = {\n    apiKey: \"AIzaSyAoUTF0F09_aSFS9U1wzA8eyK1JF3Sw7LQ\",\n    authDomain: \"colorclassification-5d716.firebaseapp.com\",\n    databaseURL: \"https://colorclassification-5d716.firebaseio.com\",\n    projectId: \"colorclassification-5d716\",\n    storageBucket: \"colorclassification-5d716.appspot.com\",\n    messagingSenderId: \"622325471999\"\n};\nlet Firebase = firebase.initializeApp(config);\nexport default Firebase;","import React, { Component } from 'react';\nimport Firebase from './Firebase.js';\nimport { Button } from 'reactstrap';\n\nclass Buttons extends Component {\n    constructor(props) {\n        super(props);\n        this.sendData = this.sendData.bind(this);\n        console.log(this.props.generateColor);\n    }\n    \n    \n    sendData = () => {\n        let colorDatabase = Firebase.database().ref('colors2');\n        var data = {\n            r: `${this.props.r}`,\n            g: `${this.props.g}`,\n            b: `${this.props.b}`,\n            label: this.props.button\n        }\n        console.log('saving')\n        console.log(data)\n        let color = colorDatabase.push(data, finished);\n        console.log(\"Firebase generated key: \" + color.key);\n        \n        let that = this\n        function finished(err) {\n            if (err) {\n                console.log(\"ooops, something went wrong\");\n                console.log(\"err\");\n            } else {\n                console.log(\"Data saved successfully\");\n                that.props.generateColor();\n            }\n        }\n        console.log('onclick')\n    }\n    render() {\n        return (\n            <React.Fragment>\n                <Button onClick={this.sendData}>{this.props.button}</Button>{' '}\n            </React.Fragment>\n            \n        )\n    }\n}\n\nexport default Buttons;","import React, { Component } from 'react';\nimport p5 from 'p5';\n\nvar r, g, b;\n\nclass Newcanvas extends Component {\n  constructor(props) {\n    super(props);\n    this.removeCanvas = this.removeCanvas.bind(this);\n    this.generateCanvas = this.generateCanvas.bind(this);\n    this.sketch = this.sketch.bind(this);\n  }\n\n  componentDidMount() {\n    this.generateCanvas();\n  }\n  componentDidUpdate() {\n    this.removeCanvas();\n    this.generateCanvas();\n  }\n\n  removeCanvas = () => {\n    this.canvas.remove();\n  }\n\n  generateCanvas = () => {\n    this.canvas = new p5(this.sketch, this.refs.wrapper)\n  }\n  sketch = (p) => {\n    r = this.props.colors[0]\n    g = this.props.colors[1]\n    b = this.props.colors[2]\n    p.setup = function () {\n      p.createCanvas(200, 200);\n    };\n    p.draw = function () {\n      p.background(r, g, b);\n      p.noStroke();\n      p.push();\n      p.pop();\n    }\n  };\n  render() {\n    return (\n      <div ref=\"wrapper\">\n      </div>\n    )\n  } \n}\nexport default Newcanvas;","import React, { Component } from 'react';\nimport Firebase from './Firebase.js';\nimport p5 from 'p5';\nimport Nav from './Nav.js'\nimport * as tf from '@tensorflow/tfjs';\nimport { Button, Form, FormGroup, Label, Input, FormText } from 'reactstrap';\nimport './App.css';\nimport '../node_modules/react-vis/dist/style.css';\nimport {XYPlot, LineSeries, VerticalGridLines, HorizontalGridLines, XAxis, YAxis} from 'react-vis';\nimport { Container, Row, Col } from 'reactstrap';\n\nvar num = Math.round(0xffffff * Math.random());\nvar r = num >> 16;\nvar g = num >> 8 & 255;\nvar b = num & 255;\nlet model;\nclass Train extends Component {\n    constructor(props) {\n        super(props)\n        this.allData = this.props.allData\n        this.labelList = [\n            'blue-ish',\n            'green-ish',\n            'pink-ish',\n            'grey-ish',\n            'red-ish',\n            'purple-ish',\n            'brown-ish',\n            'orange-ish', \n            'yellow-ish'\n        ]\n        this.data = []\n        this.train = this.train.bind(this);\n        this.downloadData = this.downloadData.bind(this);\n        this.state = {\n            value: '',\n            numEpoch: 0,\n            data: [],\n            loss: 0,\n            colors: [r, g, b],\n            prediction: ''\n        }\n\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.removeTodo = this.removeTodo.bind(this);\n        console.log(this.allData)\n    }\n\n    \n  \n    handleChange(event) {\n      this.setState({value: event.target.value});\n    }\n  \n    handleSubmit(event) {\n        let that = this\n        event.preventDefault();\n        if (this.state.value == '') {\n            alert('input a value')\n        }\n        let numEpoch = parseInt(this.state.value)\n\n        console.log(numEpoch)\n        this.setState({\n            numEpoch: numEpoch\n        }, () => {\n            that.train()\n        });\n      \n    }\n  \n    removeTodo(item) {\n      let todoList = this.state.todoList\n      todoList = todoList.filter(function(value, index, arr){\n  \n        return value !== item;\n    \n      });\n    \n      this.setState({\n        todoList: todoList\n      });\n    }\n\n\n    train = () => {\n        let numEpoch = this.state.numEpoch\n        // document.getElementById('epochNum').value= numEpoch;\n        let xs, ys;\n        let colors = []\n        let labels = []\n        model = tf.sequential();\n        // console.log(this.allData)\n        for (let record of this.allData.entries) {\n            console.log(record.label)\n            let col = [record.r / 255, record.g / 255, record.b / 255];\n            colors.push(col);\n            labels.push(this.labelList.indexOf(record.label));\n        }\n        console.log(colors, labels)\n    \n    \n        // getting the Xs\n        xs = tf.tensor2d(colors);\n        \n        let labelsTensor = tf.tensor1d(labels, 'int32');\n        labelsTensor.print();\n    \n        // getting the Ys\n        ys = tf.oneHot(labelsTensor, 9);\n        labelsTensor.dispose();\n    \n        console.log(xs.shape, ys.shape);\n        // xs.print();\n        // ys.print();\n    \n        \n        let hidden = tf.layers.dense({\n            units: 16,\n            activation: 'sigmoid',\n            inputShape: [3]\n        });\n    \n        let output = tf.layers.dense({\n            units: 9,\n            activation: 'softmax'\n        })\n    \n        model.add(hidden);\n        model.add(output);\n    \n        // console.log(model);\n        // Create an optimizer\n        const lr = 0.2;\n        const optimizer = tf.train.sgd(lr);\n    \n        model.compile({\n            optimizer: optimizer,\n            loss: 'categoricalCrossentropy'\n        });\n    \n        starttrain().then(results => {\n          console.log(results.history.loss);\n        });\n    \n    \n        let that = this\n        async function starttrain(){\n          \n          const options = {\n              epochs: numEpoch,\n              validationSplit: 0.1,\n              shuffle: true,\n              callbacks: {\n                  onBatchEnd: tf.nextFrame,\n                  onEpochEnd: (num, logs) => {\n                      console.log('Epoch: ' + num);\n                      console.log('Loss: ' + logs.val_loss);\n                      // lossP.html(logs.loss);\n                     \n                    //   document.getElementById('Epoch').value= num;\n                    //   document.getElementById('lossP').value= logs.val_loss.toFixed(3);\n\n                      that.data.push({x: num, y:logs.val_loss})\n\n                      that.setState({\n                          data: that.data,\n                          numEpoch: num,\n                          loss: logs.val_loss.toFixed(3)\n\n                      })\n                  }\n              }\n          }\n        \n          return await model.fit(xs, ys, options);\n        }\n    }\n\n    predict = () => {\n        let that = this\n        tf.tidy(() => {\n            const xs = tf.tensor2d([\n                [r / 255, g / 255, b / 255]\n            ]);\n            if (!model) {\n                alert('train model first')\n                return\n            }\n            let results = model.predict(xs);\n            let index = results.argMax(1).dataSync()[0];\n            // console.log(index);\n            let label = that.labelList[index];\n            // labelP.html(label)\n            // console.log(label);\n            this.setState({\n                prediction: label\n            })\n        })\n    }\n\n\n    downloadData = () => {\n        // saveJSON(allData, 'colorData.json');\n        console.log(\"downloading\", this.allData);\n        this.canvas2.saveJSON(this.allData, 'colorData.json');\n    }\n\n    generateCanvas = () => {\n        this.canvas2 = new p5(this.sketch, this.refs.wrapper3)\n        this.canvas2 = new p5(this.sketch2, this.refs.wrapper5)\n    }\n\n    sketch = (p) => {\n        var rotation = 0;\n        p.setup = function () {\n            p.createCanvas(200, 200);\n        };\n\n        p.draw = function () {\n            p.background(0);\n            p.noStroke();\n            // p.push();\n            // p.rotateY(0);\n            // p.box(100);\n            // p.pop();\n        }\n\n    };\n\n    sketch2 = (p) => {\n        r = this.state.colors[0]\n        g = this.state.colors[1]\n        b = this.state.colors[2]\n        p.setup = function () {\n          p.createCanvas(100, 100);\n        };\n        p.draw = function () {\n          p.background(r, g, b);\n          p.noStroke();\n          p.push();\n          p.pop();\n        }\n        \n        // rSlider.position(20, 20);\n    };\n\n    generateColor= () => {\n        num = Math.round(0xffffff * Math.random());\n        r = num >> 16;\n        g = num >> 8 & 255;\n        b = num & 255;\n        // r = Math.floor(Math.random() * Math.floor(256))\n        // g = Math.floor(Math.random() * Math.floor(256))\n        // b = Math.floor(Math.random() * Math.floor(256))\n        \n        this.setState(\n          { colors: [r, g, b] }, \n          () => console.log(\"generating new colors\", this.state.colors));\n    }\n\n    componentDidMount() {\n        \n        this.generateCanvas();\n    }\n\n\n    // remove canvas from data visualization page\n    componentDidUnMount() {\n        // this.removeCanvas();\n    }\n\n    render() {\n        // console.log(this.props)\n\n        // const data = [\n        //     {x: 0, y: 8},\n        //     {x: 1, y: 5},\n        //     {x: 2, y: 4},\n        //     {x: 3, y: 9},\n        //     {x: 4, y: 1},\n        //     {x: 5, y: 7},\n        //     {x: 6, y: 6},\n        //     {x: 7, y: 3},\n        //     {x: 8, y: 2},\n        //     {x: 9, y: 0}\n        // ];\n        console.log(this.data)\n        return(\n            // <Container>\n            //     <Row>\n            //         {/* <Col sm=\"3\">\n                        \n            //         </Col> */}\n            //         <\n            //     </Row>\n            // </Container>\n            <React.Fragment>\n                {/* <Col xs=\"3\"></Col> */}\n\n                <Col xs=\"12\">\n                    <Form inline onSubmit={this.handleSubmit}>\n                        <Col xs=\"6\">\n\n                            <FormGroup>\n                                \n                                <Input onChange={this.handleChange} placeholder=\"Number of Epoches\"/>{'   '}\n                                epoch: {this.state.numEpoch + 1}  loss: {this.state.loss}\n                            </FormGroup>\n                        </Col>\n                        <Col xs=\"6\">\n                            <Button color=\"primary\">Start training</Button>{'   '}\n                            <Button onClick={this.downloadData}>Download Data</Button>\n                            \n\n                        </Col>\n                    \n\n                    </Form>\n                \n                \n                    \n                </Col>\n\n\n                \n                    \n                {/* <p></p> */}\n                    \n                <Col xs=\"12\">\n                    \n                    <div className=\"App canvas\">\n                        \n                        <XYPlot height={300} width={window.innerWidth * 0.8}>\n                            \n                            <VerticalGridLines />\n                            <HorizontalGridLines />\n                            <XAxis />\n                            <YAxis />\n                            <LineSeries data={this.state.data} />\n                        </XYPlot>\n                    </div>\n                    <div id=\"wrapper3\"/>\n                    \n                </Col>\n                    \n\n                <Col xs=\"6\">\n\n                    <div ref=\"wrapper5\"/>\n                    <p>{this.state.prediction}</p>\n                </Col>\n                <Col xs=\"6\">\n                    <Button color=\"primary\" onClick={this.generateColor}>generate color</Button>{'   '}\n                    <Button color=\"primary\" onClick={this.predict}>predict</Button>\n                </Col>\n\n                \n                \n                    \n                    \n\n                \n\n                    \n            </React.Fragment>\n            \n            \n        )\n        \n    }\n\n}\nexport default Train;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom'\n\nclass Nav extends Component {\n    render() {\n        return (\n            <nav className=\"navbar navbar-light bg-light\">\n                <Link className=\"nav-item nav-link\" to=\"/\">Data Collection</Link>\n                <Link className=\"nav-item nav-link\" to=\"/model\">Model</Link>\n                <Link className=\"nav-item nav-link\" to=\"/visualization\">Visualization</Link>\n                \n            </nav>\n        );\n    }\n}\n\nexport default Nav;","import React, { Component } from 'react';\nimport Firebase from './Firebase.js';\nimport p5 from 'p5';\nimport Train from './Train.js';\nimport { exists } from 'fs';\n\nclass Displaycanvas extends Component {\n  constructor(props) {\n    super(props);\n    this.rect_x = window.innerWidth / 100;\n    this.width = window.innerWidth;\n    this.colorByLabel = {\n      'blue-ish': [],\n      'green-ish': [],\n      'pink-ish': [],\n      'grey-ish': [],\n      'red-ish': [],\n      'purple-ish': [],\n      'brown-ish': [],\n      'orange-ish': [], \n      'yellow-ish': []\n    }\n    this.allData = {\n      entries: []\n    }\n    this.x_pos = []\n    this.y_pos = []\n    this.color_labels = []\n    this.y_init = 0\n\n    this.removeCanvas = this.removeCanvas.bind(this);\n    this.generateCanvas = this.generateCanvas.bind(this);\n    this.gotData = this.gotData.bind(this);\n    this.displayColor = this.displayColor.bind(this);\n    this.sketch = this.sketch.bind(this);\n  }\n\n  componentDidMount() {\n    this.generateCanvas();\n  }\n\n  componentDidUpdate() {\n    console.log('did update')\n    this.removeCanvas();\n    this.colorByLabel = {\n      'blue-ish': [],\n      'green-ish': [],\n      'pink-ish': [],\n      'grey-ish': [],\n      'red-ish': [],\n      'purple-ish': [],\n      'brown-ish': [],\n      'orange-ish': [], \n      'yellow-ish': []\n    }\n    this.allData = {\n      entries: []\n    }\n    this.x_pos = []\n    this.y_pos = []\n    this.color_labels = []\n    this.y_init = 0\n    this.generateCanvas();\n  }\n\n  removeCanvas = () => {\n    this.canvas2.remove();\n  }\n\n  generateCanvas = () => {\n    this.canvas2 = new p5(this.sketch, this.refs.wrapper2)\n  }\n\n  sketch = (p) => {\n    p.setup = function() {\n      p.createCanvas(window.innerWidth * 0.9, window.innerWidth * 0.9);\n    };\n\n    let colorDatabase = Firebase.database().ref('colors2');\n    console.log(colorDatabase)\n    colorDatabase.once('value', this.gotData);\n  };\n\n\n\n  displayColor = (label, x, y) => {\n    let c = this.colorByLabel[label]\n    let p = this.canvas2\n    // console.log(p._setupDone); \n    let that = this\n    // console.log(label, x, y)\n    \n    p.fill(0)\n    // let label_display = label.split(\"-\")[0]\n    // p.text(label_display, x - this.rect_x * 0.8, y + this.rect_x * 0.5)\n\n    // console.log(c.length)\n    // c = c.slice(Math.random(0, 20), 50 + Math.random(0, 20));\n    console.log(x)\n    for (let i = 0; i < c.length; i ++) {      \n      p.noStroke();\n      p.fill(c[i].r, c[i].g, c[i].b);\n      p.rect(x, y, that.rect_x, that.rect_x);\n      x = x + that.rect_x;\n      if (x >= that.width) {\n        x = 0;\n        y = y + that.rect_x;\n      }\n    }\n  }\n\n  gotData = (results) => {\n    let data = results.val();\n    let keys = Object.keys(data);\n    \n    // keys = keys.slice(Math.random(0, 300), 100 + Math.random(0, 300));\n    console.log(keys[0])\n    // let counter = 0;\n    for (let key of keys) {\n      // if (counter < 100) {\n        \n      //   // counter = counter + 1\n      // }\n      let record = data[key];\n      console.log(record)\n      this.colorByLabel[record.label].push(record);\n      this.allData.entries.push(record);\n      \n    }\n    // counter = 0\n    for (let key in this.colorByLabel) {\n      // if (counter < 100) {\n        \n      // }\n      this.color_labels.push(key)\n      this.y_init = this.y_init + this.rect_x;\n      this.x_pos.push(0)\n      this.y_pos.push(this.y_init)\n      // counter = counter + 1\n    }\n\n    for (let i = 0; i < this.x_pos.length; i ++) {\n      this.displayColor(this.color_labels[i], this.x_pos[i], this.y_pos[i])\n    }\n    console.log(this.allData)\n  }\n\n  \n\n\n  render() {\n    return (\n      <React.Fragment>\n        {/* <div>\n          <Train allData={this.allData} labelList={this.labelList}/>\n        </div> */}\n        <div ref=\"wrapper2\">\n        </div>\n      </React.Fragment>\n    )\n  } \n}\nexport default Displaycanvas; ","import React, { Component } from 'react';\nimport Canvas from './Sketch.js'; //  with brackets means not default export\nimport Newcanvas from './Newcanvas.js';\nimport Nav from './Nav.js'\nimport Displaycanvas from './Displaycanvas.js';\nimport { Container, Row, Col } from 'reactstrap';\nimport './App.css';\n\n// var r = Math.floor(Math.random() * Math.floor(256))\n// var g = Math.floor(Math.random() * Math.floor(256))\n// var b = Math.floor(Math.random() * Math.floor(256))\n\nvar num = Math.round(0xffffff * Math.random());\nvar r = num >> 16;\nvar g = num >> 8 & 255;\nvar b = num & 255;\n\nclass Datacollection extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      colors: [r, g, b],\n    };\n    this.generateColor = this.generateColor.bind(this);\n  }\n\n  generateColor= () => {\n    num = Math.round(0xffffff * Math.random());\n    r = num >> 16;\n    g = num >> 8 & 255;\n    b = num & 255;\n    // r = Math.floor(Math.random() * Math.floor(256))\n    // g = Math.floor(Math.random() * Math.floor(256))\n    // b = Math.floor(Math.random() * Math.floor(256))\n    \n    this.setState(\n      { colors: [r, g, b] }, \n      () => console.log(\"generating new colors\", this.state.colors));\n  }\n\n  render() {\n    console.log('color state ' + this.state.colors)\n    // this.generateColor();\n    return (\n      <div>\n        <Nav/>\n       \n        <Container>\n          <Row>\n            <Col>\n              <Newcanvas colors={this.state.colors}/>\n              <Canvas generateColor={this.generateColor} colors={this.state.colors}/>\n              <Displaycanvas colors={this.state.colors}/>\n            </Col>\n            \n          </Row>\n\n        </Container>\n\n      </div>\n    );\n  }\n}\n\nexport default Datacollection;\n","import React, { Component } from 'react';\nimport Firebase from './Firebase.js';\nimport p5 from 'p5';\nimport Train from './Train.js';\nimport Nav from './Nav.js';\nimport { Container, Row, Col } from 'reactstrap';\n\n\nclass Displaycanvas extends Component {\n  constructor(props) {\n    super(props);\n    this.rect_x = 40;\n    this.width = this.rect_x * 80;\n    this.colorByLabel = {\n      'blue-ish': [],\n      'green-ish': [],\n      'pink-ish': [],\n      'grey-ish': [],\n      'red-ish': [],\n      'purple-ish': [],\n      'brown-ish': [],\n      'orange-ish': [], \n      'yellow-ish': []\n    }\n    this.allData = {\n      entries: []\n    }\n    this.x_pos = []\n    this.y_pos = []\n    this.color_labels = []\n    this.y_init = 0\n\n    this.removeCanvas = this.removeCanvas.bind(this);\n    this.generateCanvas = this.generateCanvas.bind(this);\n    this.gotData = this.gotData.bind(this);\n    // this.displayColor = this.displayColor.bind(this);\n    this.sketch = this.sketch.bind(this);\n  }\n\n  componentDidMount() {\n    this.generateCanvas();\n  }\n\n  componentDidUpdate() {\n    console.log('did update')\n    this.removeCanvas();\n    this.colorByLabel = {\n      'blue-ish': [],\n      'green-ish': [],\n      'pink-ish': [],\n      'grey-ish': [],\n      'red-ish': [],\n      'purple-ish': [],\n      'brown-ish': [],\n      'orange-ish': [], \n      'yellow-ish': []\n    }\n    this.allData = {\n      entries: []\n    }\n    this.x_pos = []\n    this.y_pos = []\n    this.color_labels = []\n    this.y_init = 0\n    this.generateCanvas();\n  }\n\n  removeCanvas = () => {\n    this.canvas2.remove();\n  }\n\n  generateCanvas = () => {\n    this.canvas2 = new p5(this.sketch, this.refs.wrapper4)\n    // console.log('lol')\n  }\n\n  sketch = (p) => {\n    p.setup = function() {\n      p.createCanvas(this.width * 20, this.width * 20);\n    };\n\n    let colorDatabase = Firebase.database().ref('colors2');\n    colorDatabase.once('value', this.gotData);\n  };\n\n\n  gotData = (results) => {\n    let data = results.val();\n    let keys = Object.keys(data);\n    \n    // keys = keys.slice(Math.random(0, 300), 100 + Math.random(0, 300));\n    console.log(keys[0])\n    // let counter = 0;\n    for (let key of keys) {\n      // if (counter < 100) {\n        \n      //   // counter = counter + 1\n      // }\n      let record = data[key];\n      console.log(record)\n      this.colorByLabel[record.label].push(record);\n      this.allData.entries.push(record);\n      \n    }\n  }\n\n  \n\n\n  render() {\n    console.log(this.allData);\n    \n    return (\n        <React.Fragment>\n          <Nav/>\n          <Container>\n            <Row>\n              \n              <Train allData={this.allData} labelList={this.labelList}/>\n              \n            </Row>\n            <Row>\n              <div ref=\"wrapper4\"/>\n            </Row>\n          </Container>\n                \n          \n\n        </React.Fragment>\n          \n    )\n  } \n}\nexport default Displaycanvas; ","import React, { Component } from 'react';\nimport Firebase from './Firebase.js';\nimport p5 from 'p5';\n// import chroms from 'chroma';\n// require('chroma');\nimport Train from './Train.js';\nimport { exists } from 'fs';\n\n\n\nfunction rgbToHsl(c) {\n    // console.log(c)\n    var r = parseInt(c.r)/255, g = parseInt(c.g)/255, b = parseInt(c.b)/255;\n    // console.log(r, g, b)\n    var max = Math.max(r, g, b), min = Math.min(r, g, b);\n    var h, s, l = (max + min) / 2;\n    \n    if(max == min) {\n      h = s = 0; // achromatic\n    } else {\n      var d = max - min;\n      s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n      switch(max){\n        case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n        case g: h = (b - r) / d + 2; break;\n        case b: h = (r - g) / d + 4; break;\n      }\n      h /= 6;\n    }\n    // console.log(h, s, l)\n    return new Array(h * 360, s * 100, l * 100);\n}\n\nfunction display(container, arr) {\n    container = document.querySelector(container);\n    arr.forEach(function(c) {\n      var el = document.createElement(\"div\");\n      el.style.backgroundColor = \"rgb(\" + c.join(\", \") + \")\";\n      container.appendChild(el);\n    })\n}\n\n\nclass Displaycanvas2 extends Component {\n  constructor(props) {\n    super(props);\n    this.rect_x = window.innerWidth / 50;\n    this.width = window.innerWidth * 0.9;\n    this.colorByLabel = {\n      'blue-ish': [],\n      'green-ish': [],\n      'pink-ish': [],\n      'grey-ish': [],\n      'red-ish': [],\n      'purple-ish': [],\n      'brown-ish': [],\n      'orange-ish': [], \n      'yellow-ish': []\n    }\n    this.allData = {\n      entries: []\n    }\n    this.x_pos = []\n    this.y_pos = []\n    this.color_labels = []\n    this.y_init = 0\n    \n\n    this.removeCanvas = this.removeCanvas.bind(this);\n    this.generateCanvas = this.generateCanvas.bind(this);\n    this.gotData = this.gotData.bind(this);\n    this.displayColor = this.displayColor.bind(this);\n    this.sketch = this.sketch.bind(this);\n    // this.rgbToHsl = this.rgbToHsl.bind(this);\n\n    this.state = {\n      selectedColor: ''\n    }\n  }\n\n  componentDidMount() {\n    this.generateCanvas();\n  }\n\n  componentWillReceiveProps(nextProps){\n    let that = this\n    if (that.props !== nextProps) {\n      console.log(nextProps.selectedColor)\n      that.setState({\n        selectedColor: nextProps.selectedColor\n      })\n    }\n\n  }\n\n  componentDidUpdate() {\n    // console.log('did update')\n    this.removeCanvas();\n    this.colorByLabel = {\n      'blue-ish': [],\n      'green-ish': [],\n      'pink-ish': [],\n      'grey-ish': [],\n      'red-ish': [],\n      'purple-ish': [],\n      'brown-ish': [],\n      'orange-ish': [], \n      'yellow-ish': []\n    }\n    this.allData = {\n      entries: []\n    }\n    this.x_pos = []\n    this.y_pos = []\n    this.color_labels = []\n    this.y_init = 0\n    this.generateCanvas();\n  }\n\n  removeCanvas = () => {\n    this.canvas2.remove();\n  }\n\n  generateCanvas = () => {\n    this.canvas2 = new p5(this.sketch, this.refs.wrapper2)\n  }\n\n  sketch = (p) => {\n    p.setup = function() {\n      p.createCanvas(window.innerWidth * 0.9, window.innerWidth * 0.9);\n    };\n\n    let colorDatabase = Firebase.database().ref('colors2');\n    // console.log(colorDatabase)\n    colorDatabase.once('value', this.gotData);\n  };\n\n  \n  \n\n  displayColor = (label, x, y) => {\n    let c = this.colorByLabel[label]\n    let p = this.canvas2\n    // console.log(p._setupDone); \n    let that = this\n    // console.log(label, x, y)\n    \n    p.fill(0)\n    // let label_display = label.split(\"-\")[0]\n    // p.text(label_display, x - this.rect_x * 0.8, y + this.rect_x * 0.5)\n    // console.log(c)\n    // c.sort(function(first, second) {\n    //     return parseInt(first.r) - parseInt(second.r)\n    // });\n\n    let rgbArr = c\n    // console.log(rgbArr)\n\n    // var rgbArr2 = [];\n    // for (var i = 0; i < 100; ++i) {\n    //     rgbArr2.push([\n    //         Math.floor(Math.random() * 256),\n    //         Math.floor(Math.random() * 256),\n    //         Math.floor(Math.random() * 256)\n    //     ]);\n    // }\n\n\n    // display(\"#before\", rgbArr2);\n\n    // console.log\n\n    var sortedRgbArr = rgbArr.map(function(element, i) {\n        // Convert to HSL and keep track of original indices\n        // console.log(element)\n        return {color: rgbToHsl(element), index: i};\n    }).sort(function(c1, c2) {\n        // Sort by hue\n        return c1.color[0] - c2.color[0];\n    }).map(function(data) {\n        // Retrieve original RGB color\n        return rgbArr[data.index];\n    });\n\n    // console.log(sortedRgbArr[5], rgbArr[5])\n    \n    // console.log(chroma('pink').darken().saturate(2).hex())\n\n    // console.log(c)\n    // console.log(c.length)\n    // c = c.slice(Math.random(0, 20), 50 + Math.random(0, 20));\n\n    \n    for (let i = 0; i < sortedRgbArr.length; i ++) {      \n      p.noStroke();\n      p.fill(sortedRgbArr[i].r, sortedRgbArr[i].g, sortedRgbArr[i].b);\n      p.rect(x, y, that.rect_x, that.rect_x);\n      x = x + that.rect_x;\n      if (x > that.width - 2 * that.rect_x) {\n        x = that.rect_x;\n        y = y + that.rect_x;\n      }\n    }\n  }\n\n  gotData = (results) => {\n    let data = results.val();\n    let keys = Object.keys(data);\n    \n    // keys = keys.slice(Math.random(0, 300), 100 + Math.random(0, 300));\n    // console.log(keys[0])\n    // let counter = 0;\n    for (let key of keys) {\n      // if (counter < 100) {\n        \n      //   // counter = counter + 1\n      // }\n      let record = data[key];\n      // console.log(record)\n      this.colorByLabel[record.label].push(record);\n      this.allData.entries.push(record);\n      \n    }\n    // counter = 0\n\n    // console.log(this.colorByLabel, this.state.selectedColor)\n    // let that = this\n    // for (let key in this.colorByLabel) {\n    //   // if (counter < 100) {\n        \n\n    //   // }\n      \n      \n    // }\n    if (this.state.selectedColor !== '') {\n      this.color_labels.push(this.state.selectedColor)\n      this.y_init = this.y_init + this.rect_x;\n      this.x_pos.push(this.rect_x)\n      this.y_pos.push(this.y_init)\n      // counter = counter + 1\n    }\n\n    for (let i = 0; i < this.x_pos.length; i ++) {\n      this.displayColor(this.color_labels[i], this.x_pos[i], this.y_pos[i])\n    }\n    // console.log(this.allData)\n  }\n\n  \n\n\n  render() {\n    \n    return (\n      <React.Fragment>\n        {/* <div>\n          <Train allData={this.allData} labelList={this.labelList}/>\n        </div> */}\n        \n\n\n        <div ref=\"wrapper2\">\n        </div>\n      </React.Fragment>\n    )\n  } \n}\nexport default Displaycanvas2; ","import React, { Component } from 'react';\nimport Firebase from './Firebase.js';\nimport Nav from './Nav.js';\nimport * as d3 from 'd3';\nimport Displaycanvas2 from './Displaycanvas2.js';\n\nconst blueData = [];\nconst greenData = [];\nconst pinkData = [];\nconst greyData = [];\nconst redData = [];\nconst purpleData = [];\nconst brownData = [];\nconst orangeData = [];\nconst yellowData = [];\n\nvar avgBlue = [0, 0, 0]\nvar avgGreen = [0, 0, 0]\nvar avgPink = [0, 0, 0]\nvar avgGrey = [0, 0, 0]\nvar avgRed = [0, 0, 0]\nvar avgPurple = [0, 0, 0]\nvar avgBrown = [0, 0, 0]\nvar avgOrange = [0, 0, 0]\nvar avgYellow = [0, 0, 0]\nvar fillColors = []\n// var bars;\n\n\nvar avgRGBs;\nvar datalength;\n\nclass Visualization extends Component {\n  constructor(props) {\n    super(props);\n    this.colorByLabel = {\n      'blue-ish': [],\n      'green-ish': [],\n      'pink-ish': [],\n      'grey-ish': [],\n      'red-ish': [],\n      'purple-ish': [],\n      'brown-ish': [],\n      'orange-ish': [], \n      'yellow-ish': []\n    }\n    this.allData = {\n      entries: []\n    }\n\n    this.margin = {top: 30, right: 100, bottom: 30, left: 100}\n    this.width = window.innerWidth - this.margin.left - this.margin.right;\n    this.height = 300 - this.margin.top - this.margin.bottom;\n\n    this.x = d3.scaleBand().range([0, this.width]);\n    this.variables = ['blue', 'green', 'pink', 'grey', 'red',\n                      'purple', 'brown', 'orange', 'yellow']\n\n    this.variables2 = [\n      'blue-ish', 'green-ish', 'pink-ish', 'grey-ish', 'red-ish',\n      'purple-ish', 'brown-ish', 'orange-ish', 'yellow-ish'\n    ]\n    this.y = d3.scaleLinear().range([this.height, 0]);\n    this.bandwidth = this.width * 0.6 / (this.variables.length + 1);\n\n    // this.bars;\n\n    // this.generateCanvas = this.generateCanvas.bind(this);\n    this.gotData2 = this.gotData2.bind(this);\n    this.onClick = this.onClick.bind(this);\n    this.state = {\n      loaded: false,\n      selectedColor: '', \n      loaded2: false     \n    }\n  }\n\n\n  onClick(color) {\n    this.setState({\n      selectedColor: color\n    }, console.log(color))\n  }\n  componentDidMount() {\n    let that = this\n    async function asyncCall() {\n        let colorDatabase = Firebase.database().ref('colors2');\n        await colorDatabase.once('value', that.gotData2);\n    }\n    \n    asyncCall();\n\n\n  }\n\n  get xAxis(){\n    // console.log('drawing xaxis...', this.x, this.y)\n    return d3.axisBottom(this.x).ticks(9);\n  }\n\n  get yAxis(){\n    var format = d3.format(\".2s\");\n    return d3.axisLeft(this.y)\n             .ticks(5)\n             .tickFormat(function(d) {\n                return format(d)\n             });\n  }\n\n  drawXAxis = (e) =>{\n    console.log(\"event\", this.refs.xaxis);\n    d3.select(this.refs.xaxis).call(this.xAxis);\n  }\n\n  drawYAxis(){\n    d3.select(this.refs.yaxis).call(this.yAxis);\n  }\n\n  formatData(data) {\n    this.x.domain(this.variables);\n    this.y.domain(d3.extent(data, (d) => d.y));\n    this.y.domain([0, d3.max(data, function(d) { return d.y; })]);\n    avgRGBs = [avgBlue, avgGreen, avgPink, avgGrey, avgRed, avgPurple, avgBrown, avgOrange, avgYellow]\n    datalength = [blueData, greenData, pinkData, greyData, redData, purpleData, brownData, orangeData, yellowData]\n    // let fillColors = []\n    for (let i = 0; i < avgRGBs.length; i ++) {\n      let element = [\n        parseInt(avgRGBs[i][0] / datalength[i].length), \n        parseInt(avgRGBs[i][1] / datalength[i].length), \n        parseInt(avgRGBs[i][2] / datalength[i].length)\n      ]\n      fillColors.push(element)\n    }\n    console.log(fillColors)\n  }\n\n  path(data){\n    this.formatData(data);\n    // console.log(parseInt(avgRed[0] / redData.length), avgBlue, avgYellow)\n    let bars = []\n    let that = this\n    data.forEach((element, i) => {\n      console.log(element, that.x(element.x), that.y(element.y))\n      bars.push(\n        <React.Fragment>\n          <rect \n            height={that.height - that.y(element.y)} \n            width={that.bandwidth}\n            x={that.x(element.x) + that.bandwidth * 0.4}\n            y={that.y(element.y)}\n            style={{\"fill\": \"rgb(\" + fillColors[i][0] + \",\" + \n                                     fillColors[i][1] + \",\" +  \n                                     fillColors[i][2] + \")\"}}\n            onClick={() => that.onClick(that.variables2[i])}\n          />\n        </React.Fragment>\n      )\n    })\n    return bars\n  }\n\n  gotData2 = (results) => {\n    let data = results.val();\n    let keys = Object.keys(data);\n    for (let key of keys) {\n      let record = data[key];\n      this.colorByLabel[record.label].push(record);\n      switch(record.label) {\n        case 'blue-ish':\n          blueData.push(record)\n          avgBlue[0] = avgBlue[0] + parseInt(record.r)\n          avgBlue[1] = avgBlue[1] + parseInt(record.g)\n          avgBlue[2] = avgBlue[2] + parseInt(record.b)\n\n          break;\n\n        case 'green-ish':\n          greenData.push(record)\n          avgGreen[0] = avgGreen[0] + parseInt(record.r)\n          avgGreen[1] = avgGreen[1] + parseInt(record.g)\n          avgGreen[2] = avgGreen[2] + parseInt(record.b)\n          break;\n\n        case 'pink-ish':\n          pinkData.push(record)\n          avgPink[0] = avgPink[0] + parseInt(record.r)\n          avgPink[1] = avgPink[1] + parseInt(record.g)\n          avgPink[2] = avgPink[2] + parseInt(record.b)\n          break;\n        \n        case 'grey-ish':\n          greyData.push(record)\n          avgGrey[0] = avgGrey[0] + parseInt(record.r)\n          avgGrey[1] = avgGrey[1] + parseInt(record.g)\n          avgGrey[2] = avgGrey[2] + parseInt(record.b)\n          break;\n        \n        case 'red-ish':\n          redData.push(record)\n          avgRed[0] = avgRed[0] + parseInt(record.r)\n          avgRed[1] = avgRed[1] + parseInt(record.g)\n          avgRed[2] = avgRed[2] + parseInt(record.b)\n          break;\n        \n        case 'purple-ish':\n          purpleData.push(record)\n          avgPurple[0] = avgPurple[0] + parseInt(record.r)\n          avgPurple[1] = avgPurple[1] + parseInt(record.g)\n          avgPurple[2] = avgPurple[2] + parseInt(record.b)\n          break;\n        \n        case 'brown-ish':\n          brownData.push(record)\n          avgBrown[0] = avgBrown[0] + parseInt(record.r)\n          avgBrown[1] = avgBrown[1] + parseInt(record.g)\n          avgBrown[2] = avgBrown[2] + parseInt(record.b)\n          break;\n        \n        case 'orange-ish':\n          orangeData.push(record)\n          avgOrange[0] = avgOrange[0] + parseInt(record.r)\n          avgOrange[1] = avgOrange[1] + parseInt(record.g)\n          avgOrange[2] = avgOrange[2] + parseInt(record.b)\n          break;\n\n        case 'yellow-ish':\n          yellowData.push(record)\n          avgYellow[0] = avgYellow[0] + parseInt(record.r)\n          avgYellow[1] = avgYellow[1] + parseInt(record.g)\n          avgYellow[2] = avgYellow[2] + parseInt(record.b)\n          break;\n      }\n      this.allData.entries.push(record);\n      \n    }\n    this.setState({\n      loaded: true\n    })\n    this.drawXAxis();\n    this.drawYAxis();\n  }\n\n\n  render() {\n    let element = document.getElementsByTagName(\"canvas\")\n    if (element.length !== 0){\n      for (let index = 0; index < element.length; index++) {\n        element[index].parentNode.removeChild(element[index]);\n      }\n    }\n    if (this.state.loaded) { \n      return (\n        <React.Fragment>\n            <Nav/>\n            <p style={{\"text-align\":\"center\"}}>Color labels by Distribution</p>\n            <svg width={this.width + this.margin.left + this.margin.right} \n                 height={this.height + this.margin.top + this.margin.bottom}>\n              \n              <g transform={`translate(${this.margin.left}, ${this.margin.top})`}>\n                {this.path([{x:'blue', y:blueData.length}, \n                            {x:'green', y:greenData.length},\n                            {x:'pink', y:pinkData.length},\n                            {x:'grey', y:greyData.length},\n                            {x:'red', y:redData.length},\n                            {x:'purple', y:purpleData.length}, \n                            {x:'brown', y:brownData.length}, \n                            {x:'orange', y:orangeData.length}, \n                            {x:'yellow', y:yellowData.length}])}\n                <g ref='xaxis' className=\"x axis\" style={{\"font\": \"1.0em\"}}\n                   transform={`translate(0, ${this.height})`}>\n                </g>\n                <g ref='yaxis' className=\"y axis\" style={{\"font\": \"1.0em\"}}>\n                </g>\n              </g>\n            </svg>\n          <Displaycanvas2 selectedColor = {this.state.selectedColor}/>\n        </React.Fragment>\n      )\n    } else {\n      return (\n        <React.Fragment>\n          <Nav/>\n          Loading...\n        </React.Fragment>\n      )\n    }\n    \n  } \n}\nexport default Visualization; ","import React, { Component } from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport Datacollection from './Datacollection';\nimport Train from './Train';\nimport Test from './Test';\nimport Visualization from './Visualization';\n\nclass RouterIndex extends Component {\n    render() {\n        return (\n             <BrowserRouter>\n                <Switch>\n                    <Route path=\"/model\" component={Test} exact/>\n                    <Route path=\"/\" component={Datacollection} exact/>\n                    <Route path=\"/visualization\" component={Visualization} exact/>\n                </Switch>\n             </BrowserRouter>\n        );\n    }\n}\n\nexport default RouterIndex;","import React, { Component } from 'react';\nimport Canvas from './Sketch.js'; //  with brackets means not default export\n// import { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport Newcanvas from './Newcanvas.js';\nimport Displaycanvas from './Displaycanvas.js';\nimport RouterIndex from './RouterIndex.js';\n\nimport './App.css';\n\n// var r = Math.floor(Math.random() * Math.floor(256))\n// var g = Math.floor(Math.random() * Math.floor(256))\n// var b = Math.floor(Math.random() * Math.floor(256))\n\nvar num = Math.round(0xffffff * Math.random());\nvar r = num >> 16;\nvar g = num >> 8 & 255;\nvar b = num & 255;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      colors: [r, g, b],\n    };\n    this.generateColor = this.generateColor.bind(this);\n  }\n\n  generateColor= () => {\n    num = Math.round(0xffffff * Math.random());\n    r = num >> 16;\n    g = num >> 8 & 255;\n    b = num & 255;\n    // r = Math.floor(Math.random() * Math.floor(256))\n    // g = Math.floor(Math.random() * Math.floor(256))\n    // b = Math.floor(Math.random() * Math.floor(256))\n    \n    this.setState(\n      { colors: [r, g, b] }, \n      () => console.log(\"generating new colors\", this.state.colors));\n  }\n\n  render() {\n    return (\n      <RouterIndex/>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}